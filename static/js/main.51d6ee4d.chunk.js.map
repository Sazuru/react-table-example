{"version":3,"sources":["features/ReactTable/ReactTable.tsx","features/ReactTable/ReactTableContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Styles","styled","div","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","React","useState","value","setValue","onChange","useAsyncDebounce","undefined","e","target","placeholder","style","fontSize","border","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","SelectColumnFilter","id","options","useMemo","Set","forEach","row","add","values","map","option","i","SliderColumnFilter","min","max","Math","type","parseInt","onClick","NumberRangeColumnFilter","display","val","old","width","marginRight","marginLeft","fuzzyTextFilterFn","rows","matchSorter","keys","autoRemove","ReactTable","data","tableData","columns","Header","getToggleAllRowsExpandedProps","isAllRowsExpanded","Cell","canExpand","getToggleRowExpandedProps","paddingLeft","depth","isExpanded","accessor","filter","Filter","filterTypes","fuzzyText","text","rowValue","String","toLowerCase","startsWith","defaultColumn","useTable","useFilters","useGlobalFilter","useSortBy","useExpanded","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","className","marginBottom","disabled","pageIndex","defaultValue","Number","pageSize","TableHead","headerGroup","TableRow","getHeaderGroupProps","headers","TableCell","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","colSpan","textAlign","TableBody","getRowProps","cells","cell","getCellProps","JSON","stringify","expanded","filters","search","sortBy","ReactTableContainer","useQuery","axios","retry","refetchOnWindowFocus","isLoading","error","console","log","queryClient","QueryClient","App","QueryClientProvider","client","initialIsOpen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51d6ee4d.chunk.js","sourcesContent":["import { matchSorter } from \"match-sorter\";\nimport React, { useMemo } from \"react\";\nimport {\n  useTable,\n  useFilters,\n  useGlobalFilter,\n  useAsyncDebounce,\n  useSortBy,\n  usePagination,\n  useExpanded,\n} from \"react-table\";\nimport styled from \"styled-components\";\nimport MaUTable from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\n// type Person = {\n//   address: { city: string; telephone: string };\n//   email: string;\n//   first_name: string;\n//   gender: string;\n//   id: number;\n//   ip_address: string;\n//   last_name: string;\n// };\n\ntype Props = {\n  data: any[];\n};\n\nconst Styles = styled.div`\n  padding: 1rem;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\n// Define a default UI for filtering\nfunction GlobalFilter({ preGlobalFilteredRows, globalFilter, setGlobalFilter }) {\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = React.useState(globalFilter);\n  const onChange = useAsyncDebounce((value) => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n\n  return (\n    <span>\n      Search:{\" \"}\n      <input\n        value={value || \"\"}\n        onChange={(e) => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`${count} records...`}\n        style={{\n          fontSize: \"1.1rem\",\n          border: \"0\",\n        }}\n      />\n    </span>\n  );\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({ column: { filterValue, preFilteredRows, setFilter } }) {\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      value={filterValue || \"\"}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({ column: { filterValue, setFilter, preFilteredRows, id } }) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach((row) => {\n      options.add(row.values[id]);\n    });\n    // @ts-ignore\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined);\n      }}\n    >\n      <option value=''>All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({ column: { filterValue, setFilter, preFilteredRows, id } }) {\n  // Calculate the min and max\n  // using the preFilteredRows\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <>\n      <input\n        type='range'\n        min={min}\n        max={max}\n        value={filterValue || min}\n        onChange={(e) => {\n          setFilter(parseInt(e.target.value, 10));\n        }}\n      />\n      <button onClick={() => setFilter(undefined)}>Off</button>\n    </>\n  );\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({ column: { filterValue = [], preFilteredRows, setFilter, id } }) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n      }}\n    >\n      <input\n        value={filterValue[0] || \"\"}\n        type='number'\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]]);\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: \"70px\",\n          marginRight: \"0.5rem\",\n        }}\n      />\n      to\n      <input\n        value={filterValue[1] || \"\"}\n        type='number'\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined]);\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: \"70px\",\n          marginLeft: \"0.5rem\",\n        }}\n      />\n    </div>\n  );\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  // @ts-ignore\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val;\n\nexport const ReactTable: React.FC<Props> = ({ data }) => {\n  const tableData = useMemo(() => data, [data]);\n\n  const columns = useMemo(\n    () => [\n      {\n        // Build our expander column\n        id: \"expander\", // Make sure it has an ID\n        Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n          <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? \"👇\" : \"👉\"}</span>\n        ),\n        Cell: ({ row }) =>\n          // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n          // to build the toggle for expanding a row\n          row.canExpand ? (\n            <span\n              {...row.getToggleRowExpandedProps({\n                style: {\n                  // We can even use the row.depth property\n                  // and paddingLeft to indicate the depth\n                  // of the row\n                  paddingLeft: `${row.depth * 2}rem`,\n                },\n              })}\n            >\n              {row.isExpanded ? \"👇\" : \"👉\"}\n            </span>\n          ) : null,\n      },\n      {\n        Header: \"Id\",\n        accessor: \"id\",\n      },\n      {\n        Header: \"Имя\",\n        accessor: \"first_name\",\n        // Use our custom `fuzzyText` filter on this column\n        filter: \"fuzzyText\",\n      },\n      {\n        Header: \"Фамилия\",\n        accessor: \"last_name\",\n        // Use our custom `fuzzyText` filter on this column\n        filter: \"fuzzyText\",\n      },\n      {\n        Header: \"Возраст\",\n        accessor: \"age\",\n        Filter: SliderColumnFilter,\n        filter: \"equals\",\n      },\n      {\n        Header: \"Визиты\",\n        accessor: \"visits\",\n        Filter: NumberRangeColumnFilter,\n        filter: \"between\",\n      },\n      {\n        Header: \"Почта\",\n        accessor: \"email\",\n      },\n      {\n        Header: \"Пол\",\n        accessor: \"gender\",\n        Filter: SelectColumnFilter,\n        filter: \"includes\",\n      },\n    ],\n    [],\n  );\n\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      },\n    }),\n    [],\n  );\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    [],\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    state,\n    visibleColumns,\n    // @ts-ignore\n    preGlobalFilteredRows,\n    // @ts-ignore\n    setGlobalFilter,\n    // @ts-ignore\n    page,\n    // @ts-ignore\n    canPreviousPage,\n    // @ts-ignore\n    canNextPage,\n    // @ts-ignore\n    pageOptions,\n    // @ts-ignore\n    pageCount,\n    // @ts-ignore\n    gotoPage,\n    // @ts-ignore\n    nextPage,\n    // @ts-ignore\n    previousPage,\n    // @ts-ignore\n    setPageSize,\n  } = useTable(\n    {\n      columns,\n      data: tableData,\n      // @ts-ignore\n      defaultColumn, // Be sure to pass the defaultColumn option\n      filterTypes,\n    },\n    useFilters,\n    useGlobalFilter,\n    useSortBy,\n    useExpanded,\n    usePagination,\n  );\n\n  return (\n    <Styles>\n      <div className='pagination' style={{ marginBottom: \"16px\" }}>\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {\"<<\"}\n        </button>{\" \"}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {\"<\"}\n        </button>{\" \"}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {\">\"}\n        </button>{\" \"}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {\">>\"}\n        </button>{\" \"}\n        <span>\n          Page{\" \"}\n          <strong>\n            {/* @ts-ignore */}\n            {state.pageIndex + 1} of {pageOptions.length}\n          </strong>{\" \"}\n        </span>\n        <span>\n          | Go to page:{\" \"}\n          <input\n            type='number'\n            // @ts-ignore\n            defaultValue={state.pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\n              gotoPage(page);\n            }}\n            style={{ width: \"100px\" }}\n          />\n        </span>{\" \"}\n        <select\n          // @ts-ignore\n          value={state.pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value));\n          }}\n        >\n          {[10, 30, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n      <MaUTable {...getTableProps()}>\n        <TableHead>\n          {headerGroups.map((headerGroup) => (\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => {\n                return (\n                  <>\n                    <TableCell {...column.getHeaderProps()}>\n                      {/* @ts-ignore */}\n                      <div {...column.getSortByToggleProps()}>\n                        {column.render(\"Header\")}\n                        {/* @ts-ignore */}\n                        {column.isSorted ? (column.isSortedDesc ? \" 🔽\" : \" 🔼\") : \"\"}\n                      </div>\n                      {/* @ts-ignore */}\n                      <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\n                    </TableCell>\n                  </>\n                );\n              })}\n            </TableRow>\n          ))}\n          <TableRow>\n            <TableCell\n              colSpan={visibleColumns.length}\n              style={{\n                textAlign: \"left\",\n              }}\n            >\n              <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                // @ts-ignore\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n              />\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        {/* Apply the table body props */}\n        <TableBody {...getTableBodyProps()}>\n          {\n            // Loop over the table rows\n            page.map((row) => {\n              // Prepare the row for display\n              prepareRow(row);\n              return (\n                // Apply the row props\n                <TableRow {...row.getRowProps()}>\n                  {\n                    // Loop over the rows cells\n                    row.cells.map((cell) => {\n                      // Apply the cell props\n                      return (\n                        <TableCell {...cell.getCellProps()}>\n                          {\n                            // Render the cell contents\n                            cell.render(\"Cell\")\n                          }\n                        </TableCell>\n                      );\n                    })\n                  }\n                </TableRow>\n              );\n            })\n          }\n        </TableBody>\n      </MaUTable>\n      <pre>\n        <code>\n          {JSON.stringify({\n            // @ts-ignore\n            expanded: state.expanded,\n            // @ts-ignore\n            filters: state.filters,\n            // @ts-ignore\n            search: state.globalFilter,\n            // @ts-ignore\n            sortBy: state.sortBy,\n          })}\n        </code>\n      </pre>\n    </Styles>\n  );\n};\n","import React from \"react\";\nimport axios from \"axios\";\nimport {\n  useQuery,\n  // useQueryClient\n} from \"react-query\";\nimport { ReactTable } from \"./ReactTable\";\n\n// const queryClient = useQueryClient();\n\nexport const ReactTableContainer = () => {\n  const { isLoading, error, data } = useQuery(\n    \"fetchAllPeople\",\n    () => axios(\"https://my.api.mockaroo.com/checking_expand.json?key=b89539e0\"),\n    { retry: false, refetchOnWindowFocus: false },\n  );\n\n  console.log(`🚀 ~ file: ReactTableContainer.tsx ~ line 13 ~ ReactTableContainer ~ data`, data);\n  return (\n    <div>\n      {error && <div>Something went wrong ...</div>}\n\n      {isLoading ? <div>Загружаем данные о пользователях ...</div> : <ReactTable data={data.data} />}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { ReactTableContainer } from \"./features/ReactTable\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ReactTableContainer />\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}