{"version":3,"sources":["features/ReactTable/ReactTable.tsx","features/ReactTable/ReactTableContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Styles","styled","div","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","React","useState","value","setValue","onChange","useAsyncDebounce","undefined","e","target","placeholder","style","fontSize","border","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","SelectColumnFilter","id","options","useMemo","Set","forEach","row","add","values","map","option","i","SliderColumnFilter","min","max","Math","type","parseInt","onClick","NumberRangeColumnFilter","display","val","old","width","marginRight","marginLeft","fuzzyTextFilterFn","rows","matchSorter","keys","autoRemove","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","ReactTable","data","tableData","columns","Header","getToggleAllRowsExpandedProps","isAllRowsExpanded","Cell","canExpand","getToggleRowExpandedProps","paddingLeft","depth","isExpanded","accessor","filter","Filter","filterTypes","fuzzyText","text","rowValue","String","toLowerCase","startsWith","defaultColumn","useTable","useFilters","useGlobalFilter","useSortBy","useExpanded","usePagination","useRowSelect","hooks","visibleColumns","push","getToggleAllPageRowsSelectedProps","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","selectedFlatRows","console","log","className","marginBottom","disabled","pageIndex","defaultValue","Number","pageSize","TableHead","headerGroup","TableRow","getHeaderGroupProps","headers","TableCell","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","colSpan","textAlign","TableBody","getRowProps","cells","cell","getCellProps","JSON","stringify","expanded","filters","search","sortBy","selectedRowIds","ReactTableContainer","useQuery","axios","retry","refetchOnWindowFocus","isLoading","error","queryClient","QueryClient","App","QueryClientProvider","client","initialIsOpen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.099ea257.chunk.js","sourcesContent":["// @ts-nocheck\r\nimport { matchSorter } from \"match-sorter\";\r\nimport React, { useMemo } from \"react\";\r\nimport {\r\n  useTable,\r\n  useFilters,\r\n  useGlobalFilter,\r\n  useAsyncDebounce,\r\n  useSortBy,\r\n  usePagination,\r\n  useExpanded,\r\n  useRowSelect,\r\n} from \"react-table\";\r\nimport styled from \"styled-components\";\r\nimport MaUTable from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\n\r\n// type Person = {\r\n//   address: { city: string; telephone: string };\r\n//   email: string;\r\n//   first_name: string;\r\n//   gender: string;\r\n//   id: number;\r\n//   ip_address: string;\r\n//   last_name: string;\r\n// };\r\n\r\ntype Props = {\r\n  data: any[];\r\n};\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction GlobalFilter({ preGlobalFilteredRows, globalFilter, setGlobalFilter }) {\r\n  const count = preGlobalFilteredRows.length;\r\n  const [value, setValue] = React.useState(globalFilter);\r\n  const onChange = useAsyncDebounce((value) => {\r\n    setGlobalFilter(value || undefined);\r\n  }, 200);\r\n\r\n  return (\r\n    <span>\r\n      Search:{\" \"}\r\n      <input\r\n        value={value || \"\"}\r\n        onChange={(e) => {\r\n          setValue(e.target.value);\r\n          onChange(e.target.value);\r\n        }}\r\n        placeholder={`${count} records...`}\r\n        style={{\r\n          fontSize: \"1.1rem\",\r\n          border: \"0\",\r\n        }}\r\n      />\r\n    </span>\r\n  );\r\n}\r\n\r\nfunction DefaultColumnFilter({ column: { filterValue, preFilteredRows, setFilter } }) {\r\n  const count = preFilteredRows.length;\r\n\r\n  return (\r\n    <input\r\n      value={filterValue || \"\"}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined);\r\n      }}\r\n      placeholder={`Search ${count} records...`}\r\n    />\r\n  );\r\n}\r\n\r\nfunction SelectColumnFilter({ column: { filterValue, setFilter, preFilteredRows, id } }) {\r\n  const options = React.useMemo(() => {\r\n    const options = new Set();\r\n    preFilteredRows.forEach((row) => {\r\n      options.add(row.values[id]);\r\n    });\r\n\r\n    return [...options.values()];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <select\r\n      value={filterValue}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined);\r\n      }}\r\n    >\r\n      <option value=''>All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n}\r\n\r\nfunction SliderColumnFilter({ column: { filterValue, setFilter, preFilteredRows, id } }) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    preFilteredRows.forEach((row) => {\r\n      min = Math.min(row.values[id], min);\r\n      max = Math.max(row.values[id], max);\r\n    });\r\n    return [min, max];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type='range'\r\n        min={min}\r\n        max={max}\r\n        value={filterValue || min}\r\n        onChange={(e) => {\r\n          setFilter(parseInt(e.target.value, 10));\r\n        }}\r\n      />\r\n      <button onClick={() => setFilter(undefined)}>Off</button>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction NumberRangeColumnFilter({ column: { filterValue = [], preFilteredRows, setFilter, id } }) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    preFilteredRows.forEach((row) => {\r\n      min = Math.min(row.values[id], min);\r\n      max = Math.max(row.values[id], max);\r\n    });\r\n    return [min, max];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n      }}\r\n    >\r\n      <input\r\n        value={filterValue[0] || \"\"}\r\n        type='number'\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]]);\r\n        }}\r\n        placeholder={`Min (${min})`}\r\n        style={{\r\n          width: \"70px\",\r\n          marginRight: \"0.5rem\",\r\n        }}\r\n      />\r\n      to\r\n      <input\r\n        value={filterValue[1] || \"\"}\r\n        type='number'\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined]);\r\n        }}\r\n        placeholder={`Max (${max})`}\r\n        style={{\r\n          width: \"70px\",\r\n          marginLeft: \"0.5rem\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\r\n}\r\n\r\nfuzzyTextFilterFn.autoRemove = (val) => !val;\r\n\r\nconst IndeterminateCheckbox = React.forwardRef(({ indeterminate, ...rest }, ref) => {\r\n  const defaultRef = React.useRef();\r\n  const resolvedRef = ref || defaultRef;\r\n\r\n  React.useEffect(() => {\r\n    resolvedRef.current.indeterminate = indeterminate;\r\n  }, [resolvedRef, indeterminate]);\r\n\r\n  return (\r\n    <>\r\n      <input type='checkbox' ref={resolvedRef} {...rest} />\r\n    </>\r\n  );\r\n});\r\n\r\nexport const ReactTable: React.FC<Props> = ({ data }) => {\r\n  const tableData = useMemo(() => data, [data]);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        id: \"expander\",\r\n        Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\r\n          <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? \"👇\" : \"👉\"}</span>\r\n        ),\r\n        Cell: ({ row }) =>\r\n          row.canExpand ? (\r\n            <span\r\n              {...row.getToggleRowExpandedProps({\r\n                style: {\r\n                  paddingLeft: `${row.depth * 2}rem`,\r\n                },\r\n              })}\r\n            >\r\n              {row.isExpanded ? \"👇\" : \"👉\"}\r\n            </span>\r\n          ) : null,\r\n      },\r\n      {\r\n        Header: \"Id\",\r\n        accessor: \"id\",\r\n      },\r\n      {\r\n        Header: \"Имя\",\r\n        accessor: \"first_name\",\r\n        filter: \"fuzzyText\",\r\n      },\r\n      {\r\n        Header: \"Фамилия\",\r\n        accessor: \"last_name\",\r\n        filter: \"fuzzyText\",\r\n      },\r\n      {\r\n        Header: \"Возраст\",\r\n        accessor: \"age\",\r\n        Filter: SliderColumnFilter,\r\n        filter: \"equals\",\r\n      },\r\n      {\r\n        Header: \"Визиты\",\r\n        accessor: \"visits\",\r\n        Filter: NumberRangeColumnFilter,\r\n        filter: \"between\",\r\n      },\r\n      {\r\n        Header: \"Почта\",\r\n        accessor: \"email\",\r\n      },\r\n      {\r\n        Header: \"Пол\",\r\n        accessor: \"gender\",\r\n        Filter: SelectColumnFilter,\r\n        filter: \"includes\",\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      fuzzyText: fuzzyTextFilterFn,\r\n      text: (rows, id, filterValue) => {\r\n        return rows.filter((row) => {\r\n          const rowValue = row.values[id];\r\n          return rowValue !== undefined\r\n            ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase())\r\n            : true;\r\n        });\r\n      },\r\n    }),\r\n    [],\r\n  );\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      Filter: DefaultColumnFilter,\r\n    }),\r\n    [],\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    state,\r\n    visibleColumns,\r\n    preGlobalFilteredRows,\r\n    setGlobalFilter,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    selectedFlatRows,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data: tableData,\r\n      defaultColumn,\r\n      filterTypes,\r\n    },\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    useExpanded,\r\n    usePagination,\r\n    useRowSelect,\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => [\r\n        {\r\n          id: \"selection\",\r\n          Header: ({ getToggleAllPageRowsSelectedProps }) => (\r\n            <div>\r\n              <IndeterminateCheckbox {...getToggleAllPageRowsSelectedProps()} />\r\n            </div>\r\n          ),\r\n          Cell: ({ row }) => (\r\n            <div>\r\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n            </div>\r\n          ),\r\n        },\r\n        ...columns,\r\n      ]);\r\n    },\r\n  );\r\n  console.log(`🚀 ~ file: ReactTable.tsx ~ line 376 ~ state`, state);\r\n\r\n  return (\r\n    <Styles>\r\n      <div>Выбрано: {selectedFlatRows?.length}</div>\r\n      <div className='pagination' style={{ marginBottom: \"16px\" }}>\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {\"<<\"}\r\n        </button>{\" \"}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {\"<\"}\r\n        </button>{\" \"}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {\">\"}\r\n        </button>{\" \"}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {\">>\"}\r\n        </button>{\" \"}\r\n        <span>\r\n          Page{\" \"}\r\n          <strong>\r\n            {state.pageIndex + 1} of {pageOptions.length}\r\n          </strong>{\" \"}\r\n        </span>\r\n        <span>\r\n          | Go to page:{\" \"}\r\n          <input\r\n            type='number'\r\n            defaultValue={state.pageIndex + 1}\r\n            onChange={(e) => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n              gotoPage(page);\r\n            }}\r\n            style={{ width: \"100px\" }}\r\n          />\r\n        </span>{\" \"}\r\n        <select\r\n          value={state.pageSize}\r\n          onChange={(e) => {\r\n            setPageSize(Number(e.target.value));\r\n          }}\r\n        >\r\n          {[10, 30, 50].map((pageSize) => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <MaUTable {...getTableProps()}>\r\n        <TableHead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => {\r\n                return (\r\n                  <>\r\n                    <TableCell {...column.getHeaderProps()}>\r\n                      <div {...column.getSortByToggleProps()}>\r\n                        {column.render(\"Header\")}\r\n                        {column.isSorted ? (column.isSortedDesc ? \" 🔽\" : \" 🔼\") : \"\"}\r\n                      </div>\r\n                      <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\r\n                    </TableCell>\r\n                  </>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          ))}\r\n          <TableRow>\r\n            <TableCell\r\n              colSpan={visibleColumns.length}\r\n              style={{\r\n                textAlign: \"left\",\r\n              }}\r\n            >\r\n              <GlobalFilter\r\n                preGlobalFilteredRows={preGlobalFilteredRows}\r\n                globalFilter={state.globalFilter}\r\n                setGlobalFilter={setGlobalFilter}\r\n              />\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody {...getTableBodyProps()}>\r\n          {page.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <TableRow {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return <TableCell {...cell.getCellProps()}>{cell.render(\"Cell\")}</TableCell>;\r\n                })}\r\n              </TableRow>\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </MaUTable>\r\n      <pre>\r\n        <code>\r\n          {JSON.stringify({\r\n            expanded: state.expanded,\r\n            filters: state.filters,\r\n            search: state.globalFilter,\r\n            sortBy: state.sortBy,\r\n            selectedRowIds: state.selectedRowIds,\r\n          })}\r\n        </code>\r\n      </pre>\r\n    </Styles>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  useQuery,\r\n  // useQueryClient\r\n} from \"react-query\";\r\nimport { ReactTable } from \"./ReactTable\";\r\n\r\n// const queryClient = useQueryClient();\r\n\r\nexport const ReactTableContainer = () => {\r\n  const { isLoading, error, data } = useQuery(\r\n    \"fetchAllPeople\",\r\n    () => axios(\"https://my.api.mockaroo.com/checking_expand.json?key=b89539e0\"),\r\n    { retry: false, refetchOnWindowFocus: false },\r\n  );\r\n\r\n  console.log(`🚀 ~ file: ReactTableContainer.tsx ~ line 13 ~ ReactTableContainer ~ data`, data);\r\n  return (\r\n    <div>\r\n      {error && <div>Шото пошло не так ...</div>}\r\n\r\n      {isLoading ? <div>Загружаем данные о пользователях ...</div> : <ReactTable data={data.data} />}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport { ReactQueryDevtools } from \"react-query/devtools\";\r\nimport { ReactTableContainer } from \"./features/ReactTable\";\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nfunction App() {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <ReactTableContainer />\r\n      <ReactQueryDevtools initialIsOpen={false} />\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}